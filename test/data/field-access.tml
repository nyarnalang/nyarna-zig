=== Field access
--- input
\declare:
  Data = \Record:
    a, b : \Raw;
  \end(Record)
\end(declare)

\declare:
  foo = \func:
    data : \Data;
  :body:
    (\data::a, \data::b)
  \end(func)
\end(declare)

\foo(\Data(x, y))
--- rawast
+PARA
  +RCALL
    =FUNCREF .std.intrinsic.declare
    >ARG namespace
    =VOID
    >ARG public
    +DEF Data
      +RCALL
        =PROTO record
        >ARG fields
        +LOC a
          =TYPE raw
        -LOC
        +LOC b
          =TYPE raw
        -LOC
      -RCALL
    -DEF
    >ARG private
    =VOID
  -RCALL
-PARA
+PARA
  +RCALL
    =FUNCREF .std.intrinsic.declare
    >ARG namespace
    =VOID
    >ARG public
    +DEF foo
      +UCALL
        +TARGET
          =SYMREF [0]func
        -TARGET
        +PROTO primary
          =LIT text "data : "
          =SYMREF [0]Data
          =LIT text ";"
        -PROTO
        +PROTO name="body"
          =LIT text "("
          +ACCESS
            +SUBJECT
              =SYMREF [0]data
            -SUBJECT
            =ID "a"
          -ACCESS
          =LIT text ", "
          +ACCESS
            +SUBJECT
              =SYMREF [0]data
            -SUBJECT
            =ID "b"
          -ACCESS
          =LIT text ")"
        -PROTO
      -UCALL
    -DEF
    >ARG private
    =VOID
  -RCALL
-PARA
+PARA
  +UCALL
    +TARGET
      =SYMREF [0]foo
    -TARGET
    +PROTO pos
      +UCALL
        +TARGET
          =SYMREF [0]Data
        -TARGET
        +PROTO pos
          =LIT text "x"
        -PROTO
        +PROTO pos
          =LIT text "y"
        -PROTO
      -UCALL
    -PROTO
  -UCALL
-PARA
--- expr
+CALL
  +TARGET
    =SYMREF .doc.foo
  -TARGET
  +PROTO "data"
    +CALL
      +TARGET
        =SYMREF .doc.Data
      -TARGET
      +PROTO "a"
        =LIT TEXT "x"
      -PROTO
      +PROTO "b"
        =LIT TEXT "y"
      -PROTO
    -CALL
  -PROTO
-CALL
--- document
=RAW Raw "(x, y)"